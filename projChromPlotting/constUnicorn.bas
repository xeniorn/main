Attribute VB_Name = "constUnicorn"
Option Explicit


Public Enum eUnicornDataType
    uniData = 1
    uniInjection = 2
    uniFraction = 3
    uniLogBook = 4
    uniMeta = 5
End Enum

Public Enum eUnicornCurveType
    uniUV = 1
    uniCond = 2
    uniConc = 3
    uniFlow = 4
    uniPressure = 5
    uniOther = 0
End Enum

Public Const conUni3InjectionLabel As String = "UNICORN3_INJECTION"
Public Const conUni3FractionLabel As String = "UNICORN3_FRACTION"
Public Const conUni3MarkLabel As String = "UNICORN3_MARK"

Public Const conUni3FractionWaste As String = "Waste"

'UNICORN SPECIFICATION (Reverse Engineered) (PyCORN)

'+UNICORN result files
'+====================
'+
'+UNICORN is a control/evaluation software supplied with ÄKTA chromatography systems from GE Healthcare. Every chromatography run generates a result file (res-file), which is a binary file containing metadata about the run and data retrieved from various sensors in the chromatography system. Common sensors included in most ÄKTA-Systems cover UV-absorption, pH, conductivity, system pressure etc.
'+
'+The documentation supplied here is the result of reverse-engineering a limited number of such files obtained from ÄKTA Prime and ÄKTA Purifier systems. Different versions (especially newer ones) of UNICORN may generate files with different layout/encoding.
'+
'+General layout (s. samples/sample1.res)
'+--------------------
'+START --> HEADER --> DATA_BLOCKS
'+To follow along - open sample1.res (under samples/) in a hex-viewer/editor. Hex numbers given in parenthesis are from the sample1.res. Padding bytes may not be explicitly described throughout this document.
'+
'+---START---
'+Res-files start with a few check/info bytes:
'+- first 16 bytes are "11 47 11 47 18 00 00 00 B0 02 00 00 20 6C 03 00"
'+  most likely magic number to positively identify a res file
'+- next 4 bytes give EOF/file size (20 EA 0D 00)
'+  probably allow a check if recorded file size matches actual file
'+- next 4 bytes are empty
'+- next 12 bytes contain string "UNICORN 3.10" (55 4E 49 43 4F 52 4E 20 33 2E 31 30)
'+  file format version(?)
'+- at position 118 is the user name as used in Purifier systems or "prime" if the file originates from an ÄKTA Prime system. Length up to 40 characters. (70 72 69 6D 65)
'+
'+---HEADER---
'+The header contains entries of the recorded data. Entries are made up of the original file name = run name ("Manual Run 3" for ex.) and name of data series (1_UV for ex.). Additionally their position in the file and several offsets are recorded. The header ends with the last entry called "LogBook" (notice capital "B").
'+- Entries start at position 686, first entry is either CONFIG or Methods
'+- Entries are 344 bytes
'+  FORMAT of entries
'+      - 8 bytes magic-id defining type of data (meta/sensor/aux etc). WARNING: If a file has been opened and resaved the 2nd last byte is incremented by one (see table at the end, ... 01 14 --> 02 14)
'+      - 296 bytes (incl. padding) Name of data entry (CONFIG, METHOD, Logbook, 1_UV, UV1_280nm etc.)
'+      - 4 bytes int, size of the data block
'+      - 4 bytes int, offset to next data block (from meta to meta)
'+      - 4 bytes int, adresse of the data block (including some metadata)
'+      - 4 bytes int, offset from metadata to actual data
'+          -> S. example below
'+      - entries that deal with data generated by the machine during the run (UV, pressure etc.) are preceeded by hex "00 00 01 00 04 00 01 14"
'+      - Last entry is called "LogBook" (notice capital B! LogBook only occurs once per file) preceeded by hex value "00 00 00 01 00 02 00 01 13"
'+The entries are followed by lots of padding and eventually the data blocks which hold the data.
'+
'+Example values:
'+sample1.res   UV-entry (at 2366)
'+C8 A0 01 00 00 A2 01 00 20 92 03 00 F0 00 00 00
'+----V1----- ----V2----- ----V3----- ----V4-----
'+V1 (C8 A0 01 00) signed int, 106696 is the size of the data block including metadata
'+V2 (00 A2 01 00) signed int, 107008 is the offset to next data block (from meta to meta)
'+V3 (20 92 03 00) signed int, 234016 is the begin of the data block including metadata
'+V4 (F0 00 00 00) signed int, 240 is the offset from V2 to actual begin of data
'+
'+---DATA_BLOCKS---
'+There are different types of data blocks:
'+- Sensor data, marked with "06 00 02 00 01 00 4E 00" (adresse specified in header)
'+- Metadata (type1, generated during the run), marked with "06 00 06 00 01 00 4E 00" (adresse specified in header)
'+- Metadata (type2, generated before run), no offset, pure string data, no special marker
'+
'+Structure of sensor data
'+8 bytes per pair
'+4 bytes sig/int   Accumulated volume, divide by 100 to obtain value in ml
'+4 bytes sig/int   Sensor value, divide by 1000/100/10 depending on sensor type
'+
'+Structure of meta-data/type1 (Logbook, Fractions etc.)
'+180 bytes per pair/trio
'+8 bytes double float  accumulated time (in minutes?)
'+8 bytes double float  accumulated volume (in ml)
'+164 bytes string      Logbook-event, Fraction number or "Waste"
'+
'+Structure of meta-data/type2 (pure meta-data like method used during run)
'+- size defined in header (but maybe off by 1 or two bytes!)
'+- pure string
'+- string encoding is windows cp1250 / variants of it, depending on installed system
'+
'+There are two logbooks per file. Logbook and LogBook (notice capital B in 2nd one). They contain similar but not exactly the same information. LogBook is always the last entry in a res-file. LogBook contains entries acc. to system time
'+- strings in format like this "Concentration 0 %B.09, 21:51:45, Method : , Result : C:\...\prime\2009Jun16no001.RES"
'+- entries are separated by 202 bytes from begin to begin
'+
'+----
'+Magic bytes preceeding header entries:
'+- System data shares same id
'+- Fractions and LogBook/Logbook have the same/similar format but have different id
'+- Ids are consistent across (at least two) different systems (Prime/Purifier)
'+- Ids for Logbook, sensor data (UV/cond/conc/...), Injection marks and fractions are changed if a file is opened and resaved (2nd last byte is incremented by one:
'+  Logbook     ... 48 04 --> ... 49 04
'+  Sens. data  ... 01 14 --> ... 02 14
'+  Inj. mark   ... 46 04 --> ... 47 04
'+  Fractions   ... 44 04 --> ... 45 04
'+
'+- FURTHER RESAVING DOESN'T FURTHER INCREASE INDICES BY ONE!
'+
'+---Magic-ids---
'+The following magic_ids have been found and assigned so far:
'+AKTA PRIME
'+HEX VALUE                 String
'+00 00 01 00 02 00 01 00       CONFIG
'+00 00 01 00 02 00 04 02       METHODINFO
'+00 00 01 00 02 00 03 22       CreationNotes = Program / plain text
'+00 00 01 00 04 00 48 04       Logbook
'+00 00 01 00 04 00 01 14       UV
'+00 00 01 00 04 00 01 14       Cond
'+00 00 01 00 04 00 01 14       pH
'+00 00 01 00 04 00 01 14       Pressure
'+00 00 01 00 04 00 01 14       Temp
'+00 00 01 00 04 00 01 14       Conc
'+00 00 01 00 04 00 44 04       Fractions
'+00 00 01 00 02 00 50 03       1
'+00 00 01 00 02 00 01 13       LogBook
'+
'+AKTA PURIFIER
'+HEX VALUE                 String
'+00 00 01 00 02 00 01 02       Methods
'+00 00 01 00 02 00 07 22   MethodHistory
'+00 00 01 00 02 00 02 12   DOCUMENT
'+00 00 01 00 02 00 03 22       CreationNotes
'+00 00 01 00 02 00 55 22   StrategyInformation
'+00 00 01 00 02 00 10 22       MethodStrategyNotes
'+00 00 01 00 02 00 01 00       Methods Signatures
'+00 00 01 00 02 00 01 00       CONFIG
'+00 00 01 00 02 00 01 00       CALIB
'+00 00 01 00 02 00 04 02   METHODINFO
'+00 00 01 00 02 00 10 22       ResultStrategyNotes
'+00 00 01 00 04 00 48 04       Logbook
'+00 00 01 00 04 00 01 14       UV1_280nm
'+00 00 01 00 04 00 01 14       UV2_254nm
'+00 00 01 00 04 00 01 14       UV3_0nm
'+00 00 01 00 04 00 01 14       Cond
'+00 00 01 00 04 00 01 14       Cond%
'+00 00 01 00 04 00 01 14       Conc
'+00 00 01 00 04 00 01 14       Pressure
'+00 00 01 00 04 00 01 14       Flow
'+00 00 01 00 04 00 01 14       Temp
'+00 00 01 00 04 00 01 14       AuxIn1
'+00 00 01 00 04 00 01 14       AuxOut1
'+00 00 01 00 04 00 01 14       P960_Press
'+00 00 01 00 04 00 01 14       P960_Flow
'+00 00 01 00 04 00 46 04       Inject
'+00 00 01 00 02 00 01 13       LogBook

    
    
    
    
'JA:
'========OVERALL STRUCTURE OF FILES=========
'Map:
'[START REGION] - byte 1
'[zero-padding]
'[HEADER REGION] - byte 686
'[zero-padding]
'[DATA REGION] - byte 224288
'
'start gives basic info
'headers are well-defined and point to data
'data contains the data (both actual instrument readouts and metadata)


'========CONSTANT NAMING CONVENTIONS========
'_Pos is the offset of the data start (not always fixed)
'_L is the length of the data (not always fixed)
'_RES is the expected value of the data (not always fixed)

'ones that are not fixed, aren't defined as constants but as Regex


'========START REGION========
'Map:
'Start region gives some basic info about the file
'Start Address: 1
'
'Region Structure:
'[MagicID][FileSize][Blank][UnicornLabel][Blank][UserName]
'Byte Size:
'...16.......4.........4.........12........82?.......40...


'identifies the file as a unicorn .res file
Public Const conMagicID_Pos As Long = 1
Public Const conMagicID_L As Long = 16
Public Const conMagicID_RES As String = "11 47 11 47 18 00 00 00 B0 02 00 00 20 6C 03 00"

'gives the total amount of bytes in the .res file (check for consistency...)
Public Const conFileSize_Pos As Long = 17
Public Const conFileSize_L As Long = 4

'Always amounts to "UNICORN 3.10", even in Unicorn 5.x (don't know about 6 and 7)
Public Const conUnicornTitle_Pos As Long = 25
Public Const conUnicornTitle_L As Long = 12
Public Const conUnicornTitle_RES As String = "55 4E 49 43 4F 52 4E 20 33 2E 31 30"

'Gives the username that created the .res file (on Aekta FPLC it's 'default' by default)
'max length is 40
Public Const conUserName_Pos As Long = 118
Public Const conUserName_L As Long = 40


'========HEADER REGION========
'Map:
'Headers are concatenated one after the other, always padded to 344 bytes total
'Start Address: 686 (from zero - it's 687 in a VB-style string)
'
'Region Structure:
'[HEADER1][HEADER2]...[HEADERn]
'
'Single Header structure:
'[MagicID][HeaderName][DataSize][DataOffsetToNext][DataAddress][OffsetMetaToData][Blank]
'Byte Size:
'....8........296.........4.............4...............4..............4...........24...

'DataSize is the size of the data block
'DataOffsetToNext is the offset from beggining of current block to the beginning of the next one
'DataAddress is the address of the first byte of the metadata of the current block
'OffsetMetaToData is the size of the meta subblock, so also the suboffset of the data subblock

'Headers always start from this offset
Public Const conHeaderStart_Pos As Long = 687


'All heasers have a total length of 344 bytes
Public Const conHeaderTotal_L As Long = 344

'Within that, all headers start with a "magic 8" identifier sequence
Public Const conHeaderMagicID_IntPos As Long = 1
Public Const conHeaderMagicID_L As Long = 8

'Followed by a 296-byte data entry name ("Methods", "Manual Run 3:1_UV", ...)
Public Const conHeaderName_IntPos As Long = 9
Public Const conHeaderName_L As Long = 296

'then a 4-byte signed int, the size of the data block the header is associated with
Public Const conDataSize_IntPos As Long = 305
Public Const conDataSize_L As Long = 4

'then again a 4-byte signed int, meta-to-meta offset to the next data block
Public Const conDataOffsetToNext_IntPos As Long = 309
Public Const conDataOffsetToNext_L As Long = 4

'then a 4-byte signed int, offset (address) of the actual data block (+some metadata)
Public Const conDataAddress_IntPos As Long = 313
Public Const conDataAddress_L As Long = 4

'and finally a 4-byte signed int, offset from the metadata of the datablock to the actual data
Public Const conMetaToData_IntPos As Long = 317
Public Const conMetaToData_L As Long = 4


'Different magic IDs:

'Full text method
'no header / footer
Public Const conHeaderMethods_RES As String = "00 00 01 00 02 00 01 02"

'In some way names the user(s) and system(s) used
'no header / footer
Public Const conHeaderMethodHistory_RES As String = "00 00 01 00 02 00 07 22"

'Defines various stuff from Start Protocol (incl. questions)
'STARTPROTOCOL to END_STARTPROTOCOL\n
Public Const conHeaderDOCUMENT_RES As String = "00 00 01 00 02 00 02 12"

'names the techniques used by method (e.g. Size Exclusion)
'START_TECHNIQUES to END_TECHNIQUES\n
Public Const conHeaderTechniques_RES As String = "00 00 01 00 02 00 54 03"

'Defines Fractionation parameters - human-unfriendly binary
'unknown header / footer
Public Const conHeaderFracxyConfig_RES As String = "00 00 01 00 02 00 54 22"

'Gives basic strategy information, human-friendly
'no header / footer
Public Const conHeaderStrategyInformation_RES As String = "00 00 01 00 02 00 55 22"

'Raw text of Strategy notes
'no header / footer
Public Const conHeaderMethodStrategyNotes_RES As String = "00 00 01 00 02 00 10 22"

'Some kind of binary signature, very short
'unknown header / footer
Public Const conHeaderMethodSignatures_RES As String = "00 00 01 00 02 00 01 00"

'Defines variables used
'zero-padded in front
Public Const conHeaderTemplate_RES As String = "00 00 01 00 02 00 08 22"

'Names the chosen column, when exists, along with all the column data (Volume, max pressure, ...)
'COLUMNSINMETHOD to END_COLUMNSINMETHOD\n
Public Const conHeaderColumnsChoosen_RES As String = "00 00 01 00 02 00 09 22"

'Named as "=" + imported curve name, header defines time and volume units and curve type, followed by the data
'can be 03 or 04, depending on whether it's original or re-saved data
Public Const conHeaderNotConst_ImportedCurve_RES As String = "00 00 01 00 04 00 0[34] 14"

'Named as "+" + Evaluation report name - contains the raw readable text data of the named evaluation method
'
Public Const conHeaderNotConst_EvaluationMethod_RES As String = "00 00 01 00 02 00 02 02"

'Names of all the Evaluation procedures used
'no header / footer
Public Const conHeaderEvaluationProcedureNames_RES As String = "00 00 01 00 02 00 01 22"

'Raw text of Method notes. Simple. For empty Method Notes, just points to Methods section
'no header / footer
Public Const conHeaderCreationNotes_RES As String = "00 00 01 00 02 00 03 22"

'Raw text of Start notes
'no header / footer
Public Const conHeaderStartNotes_RES As String = "00 00 01 00 02 00 04 22"

'Raw text of Run notes
'no header / footer
Public Const conHeaderRunNotes_RES As String = "00 00 01 00 02 00 05 22"

'Raw text of Eval notes
'no header / footer
Public Const conHeaderEvalNotes_RES As String = "00 00 01 00 02 00 06 22"

'All the configuration settings, very long
'22? zeroes in front, some also in back
Public Const conHeaderCONFIG_RES As String = "00 00 01 00 02 00 01 00"

'Data about calibration of system components (SamplePump, Cond, ...)
'
Public Const conHeaderCALIB_RES As String = "00 00 01 00 02 00 01 00"

'Gives the filename of the method used
'
Public Const conHeaderMETHODINFO_RES As String = "00 00 01 00 02 00 04 02"

'Seems to be equal to MethodStrategyNotes when it exists
'
Public Const conHeaderResultStrategyNotes_RES As String = "00 00 01 00 02 00 10 22"

'Actual data from instrument's detectors
'240-byte header
'can be 01 or 02, depending on whether it's original or re-saved chromatogram
Public Const conHeaderNotConst_DataCurve_RES As String = "00 00 01 00 04 00 0[12] 14"

'Meta gives some info about units, etc, followed by actual data
'can be 44 or 45, depending on whether it's original or re-saved result file
Public Const conHeaderFractions_RES As String = "00 00 01 00 04 00 4[45] 04"

'Meta gives some info about units, etc, followed by actual data
'can be 46 or 47, depending on whether it's original or re-saved result file
Public Const conHeaderInject_RES As String = "00 00 01 00 04 00 4[67] 04"

'The logbook of a particular chromatogram, less extensive than the full one
'can be 48 or 49, depending on whether the data is original or not
Public Const conHeaderNotConst_ChromatogramLogBook_RES As String = "00 00 01 00 04 00 4[89] 04"

'Defines the curves in a particular Chromatogram + some extra info, including result filename. HeaderName = Chromatogram name
'Says "Zappa" in beggining and a few other places
Public Const conHeaderNotConst_ChromatogramInfo_RES As String = "00 00 01 00 02 00 50 03"

'The full logbook of the run
'Start "08000000 00000000 00000000 00000000", End "0000FFFFFFFF0000"?
Public Const conHeaderLogBook_RES As String = "00 00 01 00 02 00 01 13"

'Raw evaluation log (everything that happened after the run)
'starts with {, ends with }\n
Public Const conHeaderEVAL_LOG_RES As String = "00 00 01 00 02 00 03 02"


'========DATA SECTION========

'All the regular data sections have a 240-byte meta
Public Const conDataMeta_L As Long = 240
'The meta starts with a MagicID
Public Const conDataMagicID_IntPos As Long = 1
Public Const conDataMagicID_L As Long = 8
Public Const conDataMagicID_RES As String = "06 00 02 00 01 00 4E 00"
                                            

'Which is followed by doublets of 4-byte signed Longs
'Of which first 4 are the volume, last 4 are the signal
Public Const conDataPoint_L As Long = 8

Public Const conDataVolume_IntPos As Long = 1
Public Const conDataSignal_IntPos As Long = 5

Public Const conDataVolume_L As Long = 4
Public Const conDataSignal_L As Long = 4






'All the collection metadata (meta1, = Injection, Fraction, Logbook) have a 552-byte metadata
Public Const conMeta1Meta_L As Long = 552
'The meta starts with a MagicID
Public Const conMeta1MagicID_IntPos As Long = 1
Public Const conMeta1MagicID_L As Long = 8
Public Const conMeta1MagicID_RES As String = "06 00 06 00 01 00 4E 00"

'Which is followed by triplets - 2 8-byte double precision floats, and a 164-byte string
'Floats represent retention time and volume, and the string is the label (e.g. (fraction) 1A1, or Injection1)
Public Const conMeta1Point_L As Long = 180

Public Const conMeta1Time_IntPos As Long = 1
Public Const conMeta1Volume_IntPos As Long = 9
Public Const conMeta1Text_IntPos As Long = 17

Public Const conMeta1Time_L As Long = 8
Public Const conMeta1Volume_L As Long = 8
Public Const conMeta1Text_L As Long = 164

'All other run metadata (meta2) tends to be directly defined by the header addressing (no labeled meta-meta), and are often raw strings

Public Const conLogBookEntry_L As Long = 202
